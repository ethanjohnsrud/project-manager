[{"title":"React parent call child to update state using Hooks","description":"https://medium.com/@nugen/react-hooks-calling-child-component-function-from-parent-component-4ea249d00740\n\n//Parent\nimport React, { useRef } from \"react\";\n\nimport Toast from \"./components/Toast\";\nimport \"./styles.scss\";\n\nfunction App() {\n  const ref = useRef(null);\n\n  const handleClick = () => {\n    ref.current.showToast();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Parent Component</h1>\n      <button className=\"bigBtn\" onClick={handleClick}>\n        Show Toast\n      </button>\n      <Toast ref={ref} />\n    </div>\n  );\n}\n\nexport default App;\n\n\n//CHILD\nimport React, { useState, forwardRef, useImperativeHandle } from \"react\";\n\nimport styles from \"./toast.module.scss\";\n\nconst Toast = forwardRef((props, ref) => {\n  const [value, setValue] = useState(false);\n\n  const showToast = () => {\n    setValue(true);\n  };\n\n  const hideToast = () => {\n    setValue(false);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      showToast: showToast\n    };\n  });\n\n  return (\n    <div className={`${styles.wrap} ${value ? styles.show : null}`} {...props}>\n      <div className={styles.closeBtn} onClick={hideToast}>\n        Hide\n      </div>\n      <h1>Child component</h1>\n      <h3>\n        Component State: <span>{value.toString()}</span>\n      </h3>\n    </div>\n  );\n});\n\nexport default Toast;\n\n","tags":["React"],"entry":null},{"title":"Scroll of Menu Crashes List View :: SizedBox()","description":"ListView Builder can not operate under null premises.  Must at the bare minimum provide empty parameters.\n\nIn this situation, calculating content to supply total height for nametags.  Since, list is empty height is zero.  Must return zero as opposed to null or nothing.","tags":["Flutter-Dart"],"entry":{"title":"Scroll of Menu Crashes List View","description":"For recommendations when empty, I returned a SizedBox with no height, needs height for ListView.builder\n\nThe issue: when you use a Container or Widget without child and or without height property inside ListVIew The solution: Just give height property to Widget that inside ListView.\n\nThis is my code, that's worked for me\n\n.......\nbody: ListView(\n          shrinkWrap: true,\n          children: <Widget>[\n            Auth ? Container(height: 1): signUpWidget() , // Add height property to Container\n            .....\n            ......\n          ]\n       )","origin":"MealPlanning [Flutter Mobile App] : Issues"}},{"title":"Dart TypeCasting and Parsing","description":"Parse:\ndouble.parse(amountController.text)\n\nTypeCasting: \nfinal value = (amount  as double); //typecasting","tags":["Flutter-Dart"],"entry":null},{"title":"Absolute Positioning","description":"Goal: Place Caption overlay slide of portfolio website in Projects section.\n\n*Parent must be position: relative;\nThen child with position: absolute; top: 0; left: 0; refers to top-right corner of parent and not of entire document flow.","tags":["React","CSS"],"entry":null},{"title":"Socket.io & Express Setup","description":"//USONG SRC code\nconst express = require('express');\nconst app = express();\nconst socketio = require('socket.io')\nlet serverPort = 5000;\n\napp.use(express.static(__dirname + '/'));\nconst expressServer = app.listen(serverPort);\nconst io = socketio(expressServer);\n\n------------------------------------------\n\n//USING PRODUCTION BUILD\nconst socketio = require('socket.io');\nlet serverPort = 7500;\n\n//EXPRESS\nconst express = require('express');\nconst app = express();\nconst path = require('path');\n\n//USING EXPRESS SERVER\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('/', function(req, res) {\n    res.sendFile(Path.join(__dirname, 'build', 'index.html'));\n});\n\nconst expressServer  = app.listen(serverPort, () => {\n    console.log(\"Listening on port: \" + serverPort);\n});","tags":["Express","Socket.IO"],"entry":null},{"title":"Performance Analysis","description":"https://youtu.be/vVg9It7cOfY\nflutter run --profile --trace-skia\nWhile Running add Overlay: P\nWhile Running track Buils: a\n\nTimeline: see build tree\nCPU Profile: Show ranked method calls and times","tags":["Flutter-Dart"],"entry":null},{"title":"File Stream: Parse txt or csv = nodejs","description":"Synchronous:\nvar fs = require('fs');\nvar array = fs.readFileSync('file.txt').toString().split(\"\\n\");\nfor(i in array) {\n    console.log(array[i]);\n}\n\nAsynchronous:\nvar fs = require('fs');\nfs.readFile('file.txt', function(err, data) {\n    if(err) throw err;\n    var array = data.toString().split(\"\\n\");\n    for(i in array) {\n        console.log(array[i]);\n    }\n});","tags":["Javascript"],"entry":null},{"title":"Flutter showmodalbottomsheet height adjust","description":"https://stackoverflow.com/questions/53311553/how-to-set-showmodalbottomsheet-to-full-height\n\nBoxConstraints getConstraintsForChild(BoxConstraints constraints) {\nreturn BoxConstraints(\n  minWidth: constraints.maxWidth,\n  maxWidth: constraints.maxWidth,\n  minHeight: 0.0,\n  maxHeight: constraints.maxHeight * 9.0 / 16.0\n);}","tags":["Flutter-Dart"],"entry":null},{"title":"Checkbox not displaying color","description":"Issue: Checkbox(onChanged: null, child: );\nFix: Checkbox(onChanged: (_) {});\nTheme(data: ThemeData(unselectedWidgetColor: Theme.of(context).primaryColor), child: Transform.scale(scale: 1.5, child: Checkbox(value: this.selected.contains(this.options[index]), \n                                      onChanged: (_) {}, activeColor: Theme.of(context).primaryColor, checkColor: Colors.black,),)), ","tags":["Flutter-Dart"],"entry":{"title":"Checkbox not displaying color","description":"Theme(data: ThemeData(unselectedWidgetColor: Theme.of(context).primaryColor), child: Transform.scale(scale: 1.5, child: Checkbox(value: this.selected.contains(this.options[index]), \n                                      onChanged: (_) {}, activeColor: Theme.of(context).primaryColor, checkColor: Colors.black,),)), ","origin":"MealPlanning [Flutter Mobile App] : Configure multiple meal types - checkboxes"}},{"title":"Dart check file exists - actually works","description":"if(new File('$path/$id.jpg').existsSync() || \n          new Directory('$path/$id.jpg').existsSync() || \n          new Link('$path/$id.jpg').existsSync() )\n      return new File('$path/$id.jpg').create(recursive: true);\n    else\n      return null;","tags":["Flutter-Dart"],"entry":null},{"title":"Image.file(file) does not update on build(), ","description":"https://stackoverflow.com/questions/58794144/flutter-image-widget-wont-update-on-change-state\nhttps://github.com/flutter/flutter/issues/17419#issuecomment-549919627\n\nimageCache.clear() will do the job.\n\nI was also not able to reload the image to save locally on the screen. From debugging, I observed the old image is in fact deleted, and new image is copied there, but nothing was changing on the screen. Following is the code you need.\n\nSo, in the body of Scaffold, I have made a FutureBuilder that calls another function reload(), which then loads the file and return the image.\n\nFutureBuilder(\nfuture: reload(),\nbuilder: (BuildContext context, AsyncSnapshot<dynamic> snapshot) {\n    if(snapshot.connectionState == ConnectionState.done){\n        return snapshot.data;\n    }  \n    else{\n        return CircularProgressIndicator();\n    }\n},\n),\nHere is the reload() function:\n\nreload() async {\nString path = \"path of your image\";\nFile profileImage = File(\"$path/name.jpg\");\n\nif(profileImage.existsSync() == false){\n  return Text(\"File Not Found\");\n}\nelse{\n  imageCache.clear();\n  return Image.file(profileImage);\n}\n}\n\n\nI have a similar situation... it's just an image selection (gallery/camera) with an Image.file to show the selected picture. When the images has changed, the Image.file don't update and always shows the same result. Your solution with Image.memory works for me. I believe that the Image.file uses some cache and don't refresh the images. – siega Jan 24 at 20:00\n1\nYeah, I actually had to do the same with the selection of the image, since it will not update correctly, had to use the Image.memory too, hope it worked for you. – Duncanista Jan 24 at 23:38\nIssue is still open github.com/flutter/flutter/issues/17419 – jabu.hlong May 5 at 14:23\nSo, Image.file() uses ResizeImage.resizeIfNeeded() which in turn uses FileImage() which is the provider for the image data. The FileImage.hashCode() method uses int get hashCode => hashValues(file?.path, scale); As such, when chaning the path of an image file I believe its at this point that it fails. (I'm assuming the hasCode is used to detect if the file is dirty and needs reloading). Conversely, Image.memory uses MemoryImage whose hashcode is based on the bytes of the image. As such it will detect a change. – Emile May 23 at 20:30","tags":["Flutter-Dart"],"entry":null},{"title":"initiate state with async call - constructor stateful widget","description":"class _EditImageState extends State<EditImage> {\n  File imageFile = null;\n    @override\n        void initState () {\n          super.initState();\n          WidgetsBinding.instance.addPostFrameCallback((_){\n            setImage();\n          });\n\n        }\n    void setImage()async {await LocalStorage().getImageFile(this.widget.id).then((value)=>setState((){imageFile = value; print('setting...'); print(value);}));}","tags":["Flutter-Dart"],"entry":null},{"title":"Dart throw Exception","description":"Example:\nif(age<0) { \n      throw new FormatException(); \n   } \n\nExplanation:\nThrowing an Exception\nThe throw keyword is used to explicitly raise an exception. A raised exception should be handled to prevent the program from exiting abruptly.\n\nThe syntax for raising an exception explicitly is −\n\nthrow new Exception_name()\n\n","tags":["Flutter-Dart"],"entry":null},{"title":"Flutter save images encode decode","description":"List<int> imageBytesList = this.image.readAsBytesSync();\n    String imageEncoded = base64Encode(imageBytesList);\n\nList<int> imageBytesList = (json['image'] != null && json['image'] !='') ? List.from(base64Decode(json['image'])) : [];\n      File imageFile = null;\n      if(imageBytesList.isNotEmpty) \n      imageFile.writeAsBytesSync(imageBytesList);\n\n // List<int> imageBytes = newimage.readAsBytesSync();\n// bytes = Uint8List.fromList(value); \n // String base64Image = json.encode(list);\n\nhttps://bezkoder.com/dart-base64-image/","tags":["Flutter-Dart"],"entry":null},{"title":"Dart JSON Formatting/Converting Saving to Phone Storage","description":"Conveting to Json and from Json must be done manually for objects.\n-all objects/classes must have an Map toJson() {} and a factory Menu.fromJson(Map<String, dynamic> json) {}\n-all attributes in a map if are not already a string must be toString() called, not automatic like print()\n\n\n//Libraries to include:\nimport 'dart:convert';\nimport 'dart:io';\nimport 'dart:async';\n\n//Special Operations on Lists\nList<object> \nfinal listJson = jsonEncode(shoppingList);\nfinal data = json.decode(dataJson);\n\nLIST OF STRINGS\nString ingredientIdList = (this.selectedIngredients != null && this.selectedIngredients.isNotEmpty) ? jsonEncode(this.selectedIngredients) : '';\n\nList<String> ingredientIdList = (json['selectedIngredients'] != null && json['selectedIngredients'] !='') ? List.from(jsonDecode(json['selectedIngredients'])) : [];\n\nLIST OF OBJECTS\nList<Map> itemList = (menuItemList != null && menuItemList.isNotEmpty) ?  this.menuItemList.map((i) => i.toJson()).toList() : null;\n\nvar listCollection = json['menuItemList'] as List;\n     List<MenuItem> itemList = (listCollection != null && listCollection.isNotEmpty) ? listCollection.map((itemJson) => MenuItem.fromJson(itemJson)).toList() : [];\n\n\nFULL EXAMPLE\n============\n//LocalStorage.dart\n Future<List<Menu>> readMenuList() async {\n    Map<Permission, PermissionStatus> statuses = await [Permission.storage,].request();\n    if (await Permission.storage.request().isGranted) {\n      try {\n        final File file = await getFile('menuList');\n        // Read the file\n        final dataJson = await file.readAsString();\n        print(dataJson);\n        final data = json.decode(dataJson);\n        print('DECODE JSON File :: menuList');\n        print(data.toString());\n        print(data.map((i)=>Menu.fromJson(i)).toList());\n        List<Menu> list = data.map<Menu>((i)=>Menu.fromJson(i)).toList();\n        return list;\n      } catch (e) {\n      print('File Reading Error :: readMenuList()');\n      print(e.toString());\n        return [];\n      }\n    } else {print('Read Permission :: readMenuList() => denied');\n      openAppSettings();\n        }\n  }\n\n  Future<File> writeMenuList(List<Menu> menuList) async {\n    final File file = await getFile('menuList');\n    final listJson = jsonEncode(menuList);\n    print('ENCONDED JSON :: menuList');\n    print(listJson);\n    Map<Permission, PermissionStatus> statuses = await \n        [Permission.storage,].request();\n    if (await Permission.storage.request().isGranted) {\n      print('Write Permission :: granted');\n        return file.writeAsString(listJson);    \n      }\n      else  {print('Read Permission :: writeMenuList() => denied');\n        openAppSettings();\n        }\n  }\n\n//MenuProvider.dart // same combine as Menu.dart\n\nclass Menu { \n  Menu({this.id, this.name = 'Menu', this.menuDayList});\n  @required final String id;\n  String name = 'Menu';\n  List<MenuDay> menuDayList = [new MenuDay()];\n\n Map toJson() {//print('Menu.toJson()');\n List<Map> dayList = (menuDayList != null && menuDayList.isNotEmpty) ?  this.menuDayList.map((i) => i.toJson()).toList() : null;\n    // String dayList = (menuDayList != null && menuDayList.isNotEmpty) ? jsonEncode(menuDayList) : jsonEncode([]);\n    print(dayList.toString());\n    return {\n      'id' : this.id,\n      'name' : this.name,\n      'menuDayList' : dayList\n    };\n  }\n  factory Menu.fromJson(Map<String, dynamic> json) {//print('Menu.fromJson()');\n      var listCollection = json['menuDayList'] as List;\n     List<MenuDay> dayList = (listCollection != null && listCollection.isNotEmpty) ? listCollection.map((dayJson) => MenuDay.fromJson(dayJson)).toList() : [];\n    //  print(json['id']);\n    //  print(json['name']);\n    //  print(dayList);\n\n      return new Menu(\n        id:  json['id'], \n        name: json['name'],\n        menuDayList: dayList,\n        );\n    }\n}\n\nclass MenuDay { \n  MenuDay({this.id, this.name = 'MenuDay', this.date, this.menuSectionList});\n  @required final String id;\n  String name = 'MenuDay';\n  DateTime date = DateTime.now();\n  List<MenuSection> menuSectionList = [new MenuSection()];\n\n   Map toJson() {//print('MenuDay.toJson()');\n   List<Map> sectionList = (menuSectionList != null && menuSectionList.isNotEmpty) ?  this.menuSectionList.map((i) => i.toJson()).toList() : null;\n    // String sectionList = (menuSectionList != null && menuSectionList.isNotEmpty) ? jsonEncode(menuSectionList) : '';\n    // print(menuSectionList);\n    return {\n      'id' : this.id,\n      'name' : this.name,\n      'date' : this.date.toString(),\n      'menuSectionList' : sectionList\n    };\n  }\n  factory MenuDay.fromJson(Map<String, dynamic> json) {//print('MenuDay.fromJson()');\n      var listCollection = json['menuSectionList'] as List;\n     List<MenuSection> sectionList = (listCollection != null && listCollection.isNotEmpty) ? listCollection.map((sectionJson) => MenuSection.fromJson(sectionJson)).toList() : [];\n    //  print(json['id']);\n    //  print(json['name']);\n    //  print(DateTime.parse(json['date']));\n    //  print(sectionList);\n\n      return new MenuDay(\n        id:  json['id'], \n        name: json['name'],\n        date: DateTime.parse(json['date']),\n        menuSectionList: sectionList,\n        );\n    }\n}\n\nclass MenuSection { \n  MenuSection({this.id, this.name = 'MenuMeal', this.servings = 1, this.packable = false, this.recommendationType='Regular', this.menuItemList, this.done = false});\n  @required final String id;\n  String name = 'MenuMeal';\n  String recommendationType = 'Regular';\n  int servings = 1;\n  bool packable = false;\n  bool done = false;\n  List<MenuItem> menuItemList = [new MenuItem(id: 'uI0', name: 'EmptyItem')];\n  \n  get cost {\n    double total = 0.0;\n    if(menuItemList != null)\n      menuItemList.forEach((item)=>total +=item.cost);\n    return total;\n  }\n\n  Map toJson() {//print('MenuSection.toJson()');\n  List<Map> itemList = (menuItemList != null && menuItemList.isNotEmpty) ?  this.menuItemList.map((i) => i.toJson()).toList() : null;\n    // String itemList = (menuItemList != null && menuItemList.isNotEmpty) ? jsonEncode(menuItemList) : '';\n    // print(itemList);\n    return {\n      'id' : this.id,\n      'name' : this.name,\n      'recommendationType' : this.recommendationType,\n      'servings' : this.servings.toString(),\n      'packable' : this.packable.toString(),\n      'done' : this.done.toString(),\n      'menuItemList' : itemList\n    };\n  }\n  factory MenuSection.fromJson(Map<String, dynamic> json) {//print('MenuSection.fromJson()');\n      var listCollection = json['menuItemList'] as List;\n     List<MenuItem> itemList = (listCollection != null && listCollection.isNotEmpty) ? listCollection.map((itemJson) => MenuItem.fromJson(itemJson)).toList() : [];\n    //  print(json['id']);\n    //  print(json['name']);\n    //  print(json['recommendationType']);\n    //  print(int.parse(json['servings']));\n    //  print(json['packable'].toLowerCase() == 'true');\n    //  print(json['done'].toLowerCase() == 'true');\n    //  print(itemList);\n\n      return new MenuSection(\n        id:  json['id'], \n        name: json['name'],\n        recommendationType: json['recommendationType'],\n        servings:  int.parse(json['servings']),\n        packable: json['packable'].toLowerCase() == 'true',\n        done: json['done'].toLowerCase() == 'true',\n        menuItemList: itemList,\n        );\n    }\n\n//MenuItem.dart\nclass MenuItem {\n  final String id;\n  String referenceId;\n  Type referenceType;\n  String adjective='';\n  String name='';\n  String image = 'assets/food.png';\n  String instructions ='';  \n  double cost = 0.00;\n\n  List<String> selectedIngredients;\n\n  MenuItem({\n    @required this.id,\n    @required this.name = 'Missing',\n    this.referenceId = '',\n    this.referenceType = Ingredient,\n    this.adjective = '',\n    this.instructions ='',\n    this.cost = 0.0,\n    this.image = 'assets/food.png',\n    this.selectedIngredients,\n    });\n\n  Map toJson(){//print('MenuItem.toJson()');\n    String ingredientIdList = (this.selectedIngredients != null && this.selectedIngredients.isNotEmpty) ? jsonEncode(this.selectedIngredients) : '';\n    // print(ingredientIdList);\n\n    return {\n      'id' : this.id,\n      'name' : this.name,\n      'referenceId' : this.referenceId,\n      'referenceType' : this.referenceType.toString(),\n      'adjective' : this.adjective,\n      'instructions' : this.instructions,\n      'cost' : this.cost.toString(),\n      'image' : this.image,\n      'selectedIngredients' : ingredientIdList,\n    };\n  }\n  factory MenuItem.fromJson(Map<String, dynamic> json) {//print('MenuItem.fromJson()');\n    List<String> ingredientIdList = (json['selectedIngredients'] != null && json['selectedIngredients'] !='') ? List.from(jsonDecode(json['selectedIngredients'])) : [];\n\n    // print(json['id']);\n    //  print(json['name']);\n    //  print(json['referenceId']);\n    //  print((json['referenceType'] == 'Meal') ? Meal : (json['referenceType'] == 'Ingredient') ? Ingredient : PantryItem);\n    //  print(json['adjective']);\n    //  print(json['instructions']);\n    //  print(double.parse(json['cost']));\n    //  print(json['image']);\n    //  print(ingredientIdList);\n\n    return new MenuItem(\n      id:  json['id'], \n      name: json['name'],\n      referenceId: json['referenceId'],\n      referenceType: (json['referenceType'] == 'Meal') ? Meal : (json['referenceType'] == 'Ingredient') ? Ingredient : PantryItem,\n      adjective: json['adjective'],\n      instructions: json['instructions'],\n      cost: double.parse(json['cost']), \n      image: json['image'],\n      selectedIngredients: ingredientIdList,\n      );\n  }\n}\n\n\n","tags":["Flutter-Dart"],"entry":null},{"title":"TextEditingController / notifyListeners / provider","description":"//Widget\nfinal TextEditingController nameController = TextEditingController(); \nnameController.text = meal.name;\n    nameController.addListener(()=>mealProvider.setMealName(meal, nameController.text));\n//Provider\n  void setMealName(String mealId, String name) {this.getMeal(mealId) .name=name;} //don't call notifyListeners() when using TextEditingController(), which has its own listener\n","tags":["Flutter-Dart"],"entry":null},{"title":"VS: Visual Studio Code Reformat File","description":"alt + shift + f","tags":["VS Code"],"entry":null},{"title":"Change to Native App - Android Dependency / XML","description":"FIX:\n-> Probably means error in Android Folder that is not caught by VS code.\nCommands to rebuild android folder:\n*delete 'build' folder\n-dependecy issue-> delete 'pubspec.lock' && 'build' folder\nflutter doctor (checks connection)\nflutter clean\nflutter run\n\nflutter create (if delete android folder, should rebuild all files)\n\nERROR:\n* What went wrong:                                                      \nExecution failed for task ':app:processDebugResources'.                 \n> A failure occurred while executing com.android.build.gradle.internal.tasks.Workers$ActionFacade\n   > Android resource linking failed\n     C:\\Users\\ethan\\Documents\\6_Programs\\MealPlanning\\New_Try\\mealplanning\\android\\app\\src\\main\\res\\drawable\\launch_background.xml:4: AAPT: error: resource android:color/dkgrey not found.\n\nA problem occurred configuring root project 'path_provider'.\n> SDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable.\n\nFAILURE: Build failed with an exception.                                \n\n* What went wrong:\nExecution failed for task ':app:processDebugResources'.                 \n> A failure occurred while executing com.android.build.gradle.internal.tasks.Workers$ActionFacade\n   > Android resource linking failed\n     C:\\Users\\ethan\\Documents\\6_Programs\\MealPlanning\\mealplanning\\android\\app\\src\\main\\res\\drawable\\launch_background.xml:4: AAPT: error: resource drawable/splashscreen.png (aka com.example.mealplanning:drawable/splashscreen.png) not found.\n","tags":["Flutter-Dart"],"entry":null},{"title":"Dart Duplicate Name Import Work Arounds","description":"import 'package:shop/providers/Cart.dart' show Cart; //only imports Cart class from File and not other named classes\nimport 'package:shop/providers/Orders.dart' show Orders;\n\nimport '../providers/Orders.dart' as ord; //add preface as name work around\n\nclass OrderItem extends StatefulWidget {\n  final ord.OrderItem order; //imported from another class, not the same as class decloration above.\n\n  OrderItem(this.order);\n","tags":["Flutter-Dart"],"entry":null},{"title":"State Provider with ListView.builder() or GridView.builder()","description":"***NOTE*** using ListView.builder() or GridView.builder()\n-*okay with rerender entire list, but on single list items use => value method\n-Since only renders visable items, it reuses widgets in list, so need to use 'value' with provider instead of context\nError: UI data, not updating or syncing\n\nWith List Builder on single Item:\nitemBuilder: (cxt, i) => ChangeNotifierProvider.value(\n          value:  products[i],\n            child: ProductItem(\n\nNormal:\nitemBuilder: (cxt, i) => ChangeNotifierProvider(\n            create: (BuildContext context) => products[i],","tags":["Flutter-Dart"],"entry":null},{"title":"@required attribute in Flutter ","description":"*Import required, since not part of dart, but can be used in flutter framework\n\nimport 'package:flutter/foundation.dart'; //used for @required attribute\n\nclass Product {\n  @required final String id;\n  @required final String title;\n  final String description;\n  @required final double price;\n  final String imageURL;\n  bool isFavorite; //mutable (not final)\n\n  Product({this.id, this.title, this.description, this.price, this.imageURL, this.isFavorite});\n}","tags":["Flutter-Dart"],"entry":null},{"title":"Font Text Styling","description":"*Insert .ttf files into project at project/assets/fonts/\n\nIn pubspec.yaml\nfonts:\n    - family: OpenSans\n      fonts:\n        - asset: assets/fonts/OpenSans-Regular.ttf\n        - asset: assets/fonts/OpenSans-Bold.ttf\n          weight: 700\n\nMaterialApp(\n      title: 'Personal Expenses',\n      theme: ThemeData(\n          primarySwatch: Colors.deepOrange,\n          fontFamily: 'QuickSand',\n          textTheme: ThemeData.light().textTheme.copyWith(\n                  title: TextStyle(fontFamily: 'OpenSans', fontWeight: FontWeight.bold, fontSize: 20)), //everything marked as title\n          appBarTheme: AppBarTheme(\n              textTheme: ThemeData.light().textTheme.copyWith(\n                  title: TextStyle(fontFamily: 'OpenSans', fontSize: 22),\n                  button: TextStyle(color: Colors.white)))),\n      home: MyHomePage(),\n    );\n\nText Widgets:\nText(tx.title,\n                                style: TextStyle(\n                                    fontSize: 18, fontWeight: FontWeight.bold)),\n                            Text(DateFormat.yMMMd().format(tx.date),\n                                style: TextStyle(\n                                    fontSize: 13, color: Colors.grey))","tags":["Flutter-Dart"],"entry":null},{"title":"Add Assets (Pictures/Images) Network Images","description":"In pubspec.yaml\nassets:\n    - assets/images/waiting.png\n\nIn Widget.Build()\nContainer(\n                    height: 200,\n                    child: Image.asset('assets/images/waiting.png'))\n\nNetwork: URL Web\nImage.network(imageURL, fit: BoxFit.cover)","tags":["Flutter-Dart"],"entry":null},{"title":"Dart List Sort :'where' and 'removeWhere' operator","description":"//where is alternative to for search loop\n//where property of List runs a boolean function on all items in a list and returns list of items returning true\n  List<Transaction> get recentTransactions {\n    return transactions.where((tx)  {\n      return tx.date.isAfter(DateTime.now().subtract(Duration(days: 7)));\n    }).toList(); //where returns an Itterable, need to convert to List\n  }\n\nvoid deleteTransaction(String id) {\n    setState(() {transactions.removeWhere((tx) => tx.id == id);});\n  }","tags":["Flutter-Dart"],"entry":null},{"title":"Date Picker Popup also, setState triggers UI update","description":"void presentDatePicker() {\n    showDatePicker(\n            context: context,\n            initialDate: DateTime.now(),\n            firstDate: DateTime(2019),\n            lastDate: DateTime.now())\n        .then((pickedDate) {\n      if (pickedDate == null) //user selected cancel\n        return;\n      setState(() {\n        selectedDate = pickedDate;\n      }); //trigger to update UI\n    }); //future sends a promise immedatly, then data onsubmit, it doesn't pause app like async await","tags":["Flutter-Dart"],"entry":null},{"title":"Widget: Scaffold Scroll App: SingleChildScrollView and floatingActionButton","description":"Scaffold(\n      appBar: AppBar(\n        title: Text('Personal Expenses'),\n        actions: <Widget>[\n          IconButton(\n              icon: Icon(Icons.add),\n              onPressed: () {\n                showInputArea(context);\n              })\n        ],\n      ),\n      body: SingleChildScrollView(\n        child: Column(\n          // mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Chart(recentTransactions),\n            TransactionList(transactions, deleteTransaction)\n          ],\n        ),\n      ),\n      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,\n      floatingActionButton: FloatingActionButton(\n          child: Icon(Icons.add),\n          onPressed: () {\n            showInputArea(context);\n          }),\n    );","tags":["Flutter-Dart"],"entry":null},{"title":"Bottom Input PopUp Widget: showModalBottomSheet & GestureDetector","description":"void showInputArea(BuildContext context) {\n    showModalBottomSheet(\n        context: context,\n        builder: (newContext) {\n          return GestureDetector(\n            onTap: () {},\n            child: NewTransaction(addNewTransaction),\n            behavior: HitTestBehavior.opaque,\n          );\n        });\n  }","tags":["Flutter-Dart"],"entry":null},{"title":"Widget: MaterialApp : Setup Theme Colors","description":"MaterialApp(\n      title: 'Personal Expenses',\n      theme: ThemeData(\n          primarySwatch: Colors.deepOrange,\n          fontFamily: 'QuickSand',\n          textTheme: ThemeData.light().textTheme.copyWith(\n                  title: TextStyle(fontFamily: 'OpenSans', fontWeight: FontWeight.bold, fontSize: 20)), //everything marked as title\n          appBarTheme: AppBarTheme(\n              textTheme: ThemeData.light().textTheme.copyWith(\n                  title: TextStyle(fontFamily: 'OpenSans', fontSize: 22),\n                  button: TextStyle(color: Colors.white)))),\n      home: MyHomePage(),\n    );\n\nAccess Colors/Theme:\nRaisedButton(\n                child: Text('Add Transaction'),\n                color: Theme.of(context).primaryColor,\n                textColor: Theme.of(context).textTheme.button.color,\n                onPressed: () => {submitData()}),","tags":["Flutter-Dart"],"entry":null},{"title":"Dart DateTime & DateFormat Objects","description":"Uses:\nfinal weekDay = DateTime.now().subtract(Duration(days: 7));\nNow: DateTime.now();\nDateTime.now().toString()\n\nObject: addNewTransaction(String title, double amount, DateTime date) {...}\n\nDateFormat:\nimport 'package:intl/intl.dart'; //outside dependecy\n\nUses: Text('Date: ' + DateFormat.yMd().format(selectedDate)\nprint(DateFormat.E().format(weekDay));\nText(DateFormat.yMMMd().format(tx.date)\n\n","tags":["Flutter-Dart"],"entry":null},{"title":"Dart Dependencies","description":"Include Dart Dependencies:\nwww.pub.dev\nAdd to Dependencies: pubspec.yaml\n\nTerminal Update Dependencies: flutter pub get","tags":["Flutter-Dart"],"entry":null},{"title":"Dart 'get' getters","description":"getter: calcualte property dynamically\n  List<Map<String, Object>> get groupedTransactionValues {...return...}\n\nCalled: groupedTransactionValues.map(\n-called just as normal constant property\n\n//where is alternative to for search loop\n//where property of List runs a boolean function on all items in a list and returns list of items returning true\n  List<Transaction> get recentTransactions {\n    return transactions.where((tx)  {\n      return tx.date.isAfter(DateTime.now().subtract(Duration(days: 7)));\n    }).toList(); //where returns an Itterable, need to convert to List\n  }","tags":["Flutter-Dart"],"entry":null},{"title":"Print to Console in Dart","description":"print('Failed calclated: ${(value/total)}'); //String Interpolation uses single-quotes(Not Back Ticks): ''\nprint(DateFormat.E().format(weekDay));\nprint(totalSum);","tags":["Console","Flutter-Dart"],"entry":null},{"title":"Generate List","description":"//getter calcualte property dynamically\n  List<Map<String, Object>> get groupedTransactionValues {\n    return List.GENERATE(7, (index) {\n      //run 7 times\n      \n      return {\n        'day': DateFormat.E().format(weekDay).substring(0, 1),\n        'amount': totalSum\n      }; //returning a map (named attributes)\n    }).reversed.toList();","tags":["Flutter-Dart"],"entry":null},{"title":"Importing Pictures","description":"https://youtu.be/b6Oe2puTdMQ\n\n//SERVER.JS\nconst express = require('express');\nconst fileUpload = require('express-fileupload');\nconst app = express();\n\nconst serverPort = 5000\n\napp.use(fileUpload());\n\n// Upload Endpoint\napp.post('/upload', (req, res) => {\n    console.log('-File Upload Request Received');\n  if (req.files === null) {\n    console.warn('-File Name Blank -> No file uploaded');\n    return res.status(400).json({ msg: 'No file uploaded' });\n  }\n\n  const file = req.files.file;\n\n  file.mv(`${__dirname}/public/uploads/${file.name}`, err => {\n    if (err) {\n      console.error('-File upload failed', err);\n      return res.status(500).send(err);\n    }\n    console.log('-File upload succeeded');\n    res.json({ fileName: file.name, filePath: `/uploads/${file.name}` });\n  });\n});\n\napp.listen(serverPort, () => console.log(`Proxy Server Started on Port ${serverPort}...`));\n\n//PACKAGE.JSON\n{\n  \"name\": \"collaborative-editor\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"^4.2.4\",\n    \"@testing-library/react\": \"^9.5.0\",\n    \"@testing-library/user-event\": \"^7.2.1\",\n    \"axios\": \"^0.18.0\",\n    \"express\": \"^4.17.1\",\n    \"express-fileupload\": \"^1.1.7-alpha.3\",\n    \"image-extensions\": \"^1.1.0\",\n    \"is-hotkey\": \"^0.1.6\",\n    \"is-url\": \"^1.2.4\",\n    \"react\": \"^16.13.1\",\n    \"react-dom\": \"^16.13.1\",\n    \"react-scripts\": \"3.4.1\",\n    \"slate\": \"^0.57.1\",\n    \"slate-history\": \"^0.57.1\",\n    \"slate-react\": \"^0.57.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"proxy\": \"http://localhost:5000\"\n}\n\n//REACT :: FILEUPLOAD.js\nimport React, { Fragment, useState } from 'react';\nimport axios from 'axios';\n\nconst FileUpload = () => {\n  const [file, setFile] = useState('');\n  const [filename, setFilename] = useState('Choose File');\n  const [uploadedFile, setUploadedFile] = useState({});\n\n  const onChange = e => {\n    setFile(e.target.files[0]);\n    setFilename(e.target.files[0].name);\n  };\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      const res = await axios.post('/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n      });\n\n      const { fileName, filePath } = res.data;\n\n      setUploadedFile({ fileName, filePath });\n      console.log('Image Uploaded!', fileName, filePath, uploadedFile);\n    } catch (err) {\n      if (err.response.status === 500) \n        console.error('Image Upload Failed on Server End, may be duplicate upload',);\n      else \n        console.error('Image Upload Failed', err.response.data.msg);\n    }\n  };\n\n  return (\n    <Fragment>\n      <form onSubmit={onSubmit}>\n        <div className='custom-file mb-4'>\n          <input\n            type='file'\n            id='customFile'\n            onChange={onChange}\n          />\n          <label htmlFor='customFile'>\n            {filename}\n          </label>\n        </div>\n        <input\n          type='submit'\n          value='Upload'\n        />\n      </form>\n      {uploadedFile ? \n        <img style={{ width: '100%' }} src={uploadedFile.filePath} alt='' />\n     : null}\n    </Fragment>\n  );\n};\n\nexport default FileUpload;","tags":["React","Express"],"entry":null},{"title":"fs Writing to file","description":"const fs = require('fs'); //for writing to file\n\n//Exporting\nsaveData = () => {\n    //AllData\n    const assembledData = {serverResponse: serverResponse, allData: allData, blackList: blackList};\n    const jsonData = JSON.stringify(assembledData);\n    fs.writeFileSync(saveFile, jsonData);\n    console.log(`>-Saving to File: ${saveFile} -<`);\n    // console.log(assembledData, jsonData);\n}\n\n//Importing Data\ntry {\n    if(fs.existsSync(saveFile)){\n        const rawData = fs.readFileSync(saveFile);\n        // console.log('RAWDATA', rawData);\n        const processedData = JSON.parse(rawData);\n        if(processedData.serverResponse !== undefined)\n            serverResponse = processedData.serverResponse;\n        if(processedData.allData !== undefined)\n            allData = processedData.allData;\n        if(processedData.blackList !== undefined)\n            blackList = processedData.blackList;\n        console.log(`>-Finished Importing: ${saveFile}`);\n        // console.log(serverResponse, '\\n', allData);\n        //VerifyClearedBlackList\n        clearBlackListed();\n    } else\n        console.log('>-No Saved Data Found-<','\\n', '-> Blank Server Starting...');\n} catch( err){ console.log(`ERROR: Failed to Read: ${saveFile}`, err);}","tags":["Javascript"],"entry":null},{"title":"Cannot GET /","description":"Means no route found for index page\n\nAdd:\napp.get('/', () => ('index.html');","tags":["Express"],"entry":null},{"title":"Selection & Reference Focus","description":"https://youtu.be/ScT4ElKd6eo\n\nWITH SLATEJS EDITOR\n\n//onclick transfers focus and los selection in editor\n<button className={isMarkActive(editor, 'bold') ? 'toolbarActiveButton' : 'toolbarDeactiveButton'}\n          onClick={event => {\n            event.preventDefault();\n            toggleMark(editor, 'bold');\n            // focusEditor();\n          }}\n        >Bold</button>\n\n//Refence keep focus on editor when toolbar is clicked\nconst Button = React.forwardRef(({...props }, ref) => {\n  const editor = useSlate();\n  return(\n    <span className={isMarkActive(editor, 'bold') ? 'toolbarActiveButton' : 'toolbarDeactiveButton'}\n      {...props}\n      ref={ref}\n      onMouseDown={event => {\n        event.preventDefault();\n        toggleMark(editor, 'bold');\n      }}\n    >Bold</span>\n  );\n  }\n);","tags":["React","Javascript"],"entry":null},{"title":"Selection Issue - slatejs","description":"'autoFocus' saves last selection, yet browser shifts focus to header when onCLick, when focus is changed back to Editor (by clicking on editor) without option new focus is created (if not the same, addMark from header click is void) or jups to last focus with auto focus.  {Focus is curser}\n\nSolved with React.forwardReference and onMouseDown insead of onClick","tags":[],"entry":{"title":"Selection Issue","description":"<Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        spellCheck\n        autoFocus  //saves last selection","origin":"Editor : Configure Block Editing"}},{"title":"React Hooks :: useContext","description":"Here's how it has tobe done.  The scope is a bit more forgiving if all inside same file.\nParent:\nimport React, {useContext} from 'react';\n//declare Outside & export\nexport const EditorContext = React.createContext(null);\n\nconst TextEditor = () => {\nreturn (\n    <EditorContext.Provider\n      value={{\n        name,                    //variable  ::  can rename or pass directly in\n        toggleMark: toggleMark,  //function call [no: ()]\n      }}>\n<Toolbar/>\n</EditorContext.Provider>\n);\n\n\nChild: (can be grandchild or more)\nimport React from 'react';\nimport { EditorContext } from './TextEditor';  //import as object\n\nconst Toolbar = () => {\n    const editor = useSlate();\n    const {mm} = React.useContext(EditorContext);\n    return(\n        <div>\n        <button \n            onMouseDown={event => {\n            event.preventDefault()\n            mm(editor, 'bold');\n          }}\n        >Bold</button>\n      </div>\n    );\n  }\n\nexport default Toolbar;","tags":["React"],"entry":null},{"title":"Ternary Statement Multiple Inline Attributes","description":"<span\n      {...props.attributes}\n      style={{ fontWeight: props.leaf.bold ? '800' : 'normal',\n      fontStyle: props.leaf.italic ? 'italic' : 'none',\n      textDecoration: (props.leaf.underline && !props.leaf.strikethrough) ? 'underline' \n      : (!props.leaf.underline && props.leaf.strikethrough) ? 'line-through' \n      : (props.leaf.underline && props.leaf.strikethrough) ? 'line-through underline' : 'none'\n    }}\n    >\n      {props.children}\n    </span>","tags":["CSS"],"entry":{"title":"Add Functionality and HotKeys","description":"Italic\nUnderline\nStrikeThrough","origin":"Editor : Header"}},{"title":"Remove Spell Check","description":"Add Tag Attribute\n<input spellCheck='false'>Text Here</input>","tags":["Browser"],"entry":null},{"title":"Local Storage Session Storage Cookies","description":"Saves with Browser, even after session ends at URL\nlocalStorage.setItem('name', 'John');\nlocalStorage.getItem('name');\nlocalStorage.clear('name'); //then not saved\n\nSimilar, but clears when session ends\nsessionStorage.setItem('car', 'BMW);\nsessionStorage.getItem('car');\nsessionStorage.clear('car'); \n\nCookies\ndocument.cookie = \"username=John Doe\";\n","tags":["Browser"],"entry":null},{"title":"Console Options","description":"console.log('Hello');\nconsole.error('This is an Error'); // shades red in browser\nconsole.warn('Warning Here'); //shades yellow in browser\n\nconsole.clear(); // clears console\n\n//Table\nconsole.table([{name: 'John', email: jogh@test.com' age: 33}]);\n\n//Groups/combine\nconsole.group('Names');\nconsole.log('Tim');\nconsole.log(Sally');\nconsole.log('Chris');\nconsole.groupEnd('Names'); // then prints\n\nconsole.assert(x > y, {\"message\":\"x is not greater thsn y\", \"x: x, \"y\": y});","tags":["Browser","Console"],"entry":null},{"title":"Loops for forEach","description":"*forEach abstracts out and ALWAYS runs all the way through.\n*for loops and can break or return within.- Better for searching efficiently \nEX:\n//BREAKS and returns accordingly\nfor(let i = 0; i<blackList.length; i++){\n        if(black === session){\n            console.log(`-> Session: '${session}' is blacklisted and rejected.`);\n            return true;\n        }\n    }\n\n//Always finished loop and returned false.\nblackList.forEach((black) => {\n        if(black === session){\n            console.log(`-> Session: '${session}' is blacklisted and rejected.`);\n            return true;\n        }\n    });\n    return \n\n//SO REALLY:\nbar(){\nfoo(); //doesn't matter what foo() returns.\nreturn false;\n}\nfoo() {\nblackList.forEach((black) => {\n        if(black === session){\n            console.log(`-> Session: '${session}' is blacklisted and rejected.`);\n            return true;\n        }\n    });\n}","tags":["Javascript"],"entry":{"title":"Loops for forEach","description":"*forEach abstracts out and ALWAYS runs all the way through.\n*for loops and can break or return within.- Better for searching efficiently \nEX:\n//BREAKS and returns accordingly\nfor(let i = 0; i<blackList.length; i++){\n        if(black === session){\n            console.log(`-> Session: '${session}' is blacklisted and rejected.`);\n            return true;\n        }\n    }\n\n//Always finished loop and returned false.\nblackList.forEach((black) => {\n        if(black === session){\n            console.log(`-> Session: '${session}' is blacklisted and rejected.`);\n            return true;\n        }\n    });\n    return \n\n//SO REALLY:\nbar(){\nfoo(); //doesn't matter what foo() returns.\nreturn false;\n}\nfoo() {\nblackList.forEach((black) => {\n        if(black === session){\n            console.log(`-> Session: '${session}' is blacklisted and rejected.`);\n            return true;\n        }\n    });\n}","origin":"Concept Environment : UI Errors"}},{"title":"Console Error: ECONNRESET ","description":"Gravity error, indicating TCP connection lost after server.js file crashes.\nConsole Error: invalid import or data no defined.\nIt crashed because 'let blaskList[];' was removed.  so blackList.forEach was invalid.\nAlso, using importing 'fs' with ES6, needed ES5: 'const fs import {'fs'}'\n\nError: read ECONNRESET\nat TCP.onStreamRead(internal/stream_base_commons.js:201:27) {\nerrno: 'ECONNRESET',\ncode: 'ECONNRESET',\nsyscall: 'read'\n}","tags":[],"entry":null},{"title":"Console Error: 'EADDRINUSE'","description":"Console Error: localhost port conflict, port already in use\nEmitted 'error' event on Server instance at:\n    at emitErrorNT (net.js:1327:8)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21) {\n  code: 'EADDRINUSE',\n  errno: 'EADDRINUSE',\n  syscall: 'listen',\n  address: '::',\n  port: 7500\n}","tags":[],"entry":null},{"title":"Hard Reset Browser ","description":"Firefox: ctrl + Shift + R","tags":["Browser"],"entry":null},{"title":"Terinanry Operator: if else","description":"//Terinanry Operator\n//<conditional> ? <value if true> : <value if false>\nconst color = x > 10 ? 'red' : 'blue';\n\nReact: \nreturn (\n            <div>\n                {(this.state.display) ? <section>{this.getList()}</section>\n                : <button onClick={()=>{this.setState({display: true})}}>Show List</button>}\n            </div>\n);","tags":["Javascript"],"entry":null},{"title":"async-await ","description":"'Good Promise Code ✅'\nconst sumRandomAsyncNums = async() => {\n    const first = await random();\n    const second = await random();\n    const third = await random();\n    console.log(`Result ${first + second + third}`);\n    if (await random()) {\n        // do something\n    }\n    const randos = Promise.all([\n        random(), \n        random(),\n        random()\n    ])\n\n    for(const r of await randos) {\n        console.log(r)\n    }\n}\n\n'Bad Promise Code 💩'\n\nconst sumRandomAsyncNums = () => {\n    let first;\n    let second;\n    let third;\n\n    return random()\n        .then(v => {\n            first = v;\n            return random();\n        })\n        .then(v => {\n            second = v;\n            return random();\n        })\n        .then(v => {\n            third = v;\n            return first + second + third\n        })\n        .then(v => {\n            console.log(`Result ${v}`)\n        });\n}\nhttps://github.com/codediodeio/code-this-not-that-js/blob/master/async-await.js","tags":["Javascript"],"entry":null},{"title":"Array loops Higher Order Functions","description":"// Reduce\nconst total = orders.reduce((acc, cur) => acc + cur)\n\n// Map\nconst withTax = orders.map(v => v * 1.1)\n\n// Filter\nconst highValue = orders.filter(v => v > 100);\n\nSAME AS:\nconst total = 0;\nconst withTax = [];\nconst highValue = [];\nfor (i = 0; i < orders.length; i++) { \n\n    // Reduce\n    total += orders[i];\n\n    // Map\n    withTax.push(orders[i] * 1.1);\n\n    // Filter\n    if (orders[i] > 100) {\n        highValue.push(orders[i])\n    }\n}","tags":["Javascript"],"entry":null},{"title":"Spread-Syntax: Objects assigning attributes","description":"const pikachu = { name: 'Pikachu 🐹'  };\nconst stats = { hp: 40, attack: 60, defense: 45 }\n//ALL SAME\npikachu['hp'] = stats.hp\nconst lvl0 = Object.assign(pikachu, stats)\nconst lvl1 = Object.assign(pikachu, { hp: 45 })\n\nCreates New Object: with priority Left to Right:\nconst lvl0 = { ...pikachu, ...stats }\nconst lvl1 = { ...pikachu, hp: 45 }\n\nSpread Syntax with Arrays\n// Push \npokemon = [...pokemon, 'Bulbasaur', 'Metapod', 'Weedle']\n// Shift\npokemon = ['Bulbasaur', ...pokemon, 'Metapod', 'Weedle', ]\n\n","tags":["Javascript"],"entry":null},{"title":"Template Literals: alternative to String Concatenation ","description":"const { name, size, skills } = horse;\nbio = `${name} is a ${size} horse skilled in ${skills.join(' & ')}`\nconsole.log(bio);\n\n// Advanced Tag Example\nfunction horseAge(str, age) {\n    const ageStr = age > 5 ? 'old' : 'young';\n    return `${str[0]}${ageStr} at ${age} years`;\n}\nconst bio2 = horseAge`This horse is ${horse.age}`;\nconsole.log(bio2)\n\nOUTPUT: \"The horse is old at 7 years\"","tags":["Javascript","Console"],"entry":null},{"title":"Destructing - Function Passing -> Object Properties ","description":"'Bad Code 💩'\nfunction feed(animal) {\n    return `Feed ${animal.name} ${animal.meal} kilos of ${animal.diet}`;\n}\n'Good Code ✅'\nfunction feed({ name, meal, diet }) {\n    return `Feed ${name} ${meal} kilos of ${diet}`;\n}\n// OR\nfunction feed(animal) {\n    const { name, meal, diet } = animal;\n    return `Feed ${name} ${meal} kilos of ${diet}`;\n}","tags":["Javascript"],"entry":null},{"title":"Console Stack Trace","description":"Traces/records all methods that call an operation\nconst deleteMe = () => console.trace('bye bye database')\ndeleteMe()","tags":["Console","Javascript"],"entry":null},{"title":"Console Table Print View","description":"console.table([foo, bar, baz])","tags":["Console","Javascript"],"entry":null},{"title":"Console Logging: CSS Styling : Computed Property Names","description":"console.log('%c My Friends', 'color: orange; font-weight: bold;' )","tags":["Console","CSS","Javascript"],"entry":null},{"title":"Console record time","description":"console.time('looper')\nlet i = 0;\nwhile (i < 1000000) { i ++ }\nconsole.timeEnd('looper')","tags":["Javascript","Console"],"entry":null}]